from abc import ABC, abstractmethod
from collections import deque
from random import choice, randint

class Entity(ABC):
    pass


class Grass(Entity):
    def __str__(self):
        return 'üå±'
        

class Rock(Entity):
    def __str__(self):
        return '‚¨õÔ∏è'

class Tree(Entity):
    def __str__(self):
        return 'üå≤'

class Creature(Entity):
    def __init__(self):
        super().__init__()
        self.speed = 5
        self.hp = 5

    @abstractmethod
    def make_move():
        pass


class Herbivore(Creature):
    def __str__(self):
        return 'ü¶í'

    def make_move(self, map_obj, position):
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç—Ä–∞–≤—É
        target = find_closest(map_obj, position, Grass)
        if target:
            new_position = move_towards(position, target)
            if new_position != position and not map_obj.is_occupied(new_position, (Rock, Tree, Herbivore, Predator)):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–∞–≤–∞, –∞ –Ω–µ —Ö–∏—â–Ω–∏–∫
                if isinstance(map_obj.map.get(new_position), Grass):
                    # –¢—Ä–∞–≤–æ—è–¥–Ω–æ–µ "—Å—ä–µ–¥–∞–µ—Ç" —Ç—Ä–∞–≤—É
                    map_obj.remove_entity(new_position)
                map_obj.move_entity(position, new_position)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–∏, –¥–≤–∏–∂–µ–º—Å—è —Å–ª—É—á–∞–π–Ω–æ
            new_position = move_randomly(map_obj, position)
            if new_position != position and not map_obj.is_occupied(new_position, (Rock, Tree, Herbivore, Predator)):
                map_obj.move_entity(position, new_position)

class Predator(Creature):
    def __str__(self):
        return 'üêª'

    def make_move(self, map_obj, position):
        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–≥–æ
        target = find_closest(map_obj, position, Herbivore)
        if target:
            new_position = move_towards(position, target)
            if new_position != position and not map_obj.is_occupied(new_position, (Grass, Rock, Tree, Predator)):
                # –ï—Å–ª–∏ –Ω–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ, —Ö–∏—â–Ω–∏–∫ –µ–≥–æ —Å—ä–µ–¥–∞–µ—Ç
                if isinstance(map_obj.map.get(new_position), Herbivore):
                    map_obj.remove_entity(new_position)
                map_obj.move_entity(position, new_position)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–∏, –¥–≤–∏–∂–µ–º—Å—è —Å–ª—É—á–∞–π–Ω–æ
            new_position = move_randomly(map_obj, position)
            if new_position != position:
                map_obj.move_entity(position, new_position)
        



def find_closest(map_obj, start, target_type):
    queue = deque([start])  # –æ—á–µ—Ä–µ–¥—å –¥–ª—è BFS
    visited = {start}

    while queue:
        x, y = queue.popleft()

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–±—ä–µ–∫—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
        if isinstance(map_obj.map.get((x, y)), target_type):
            return (x, y)

        for neighbor in map_obj.get_neighbors((x, y)):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

    return None

def move_towards(start, target):
    x1, y1 = start
    x2, y2 = target

    dx = x2 - x1
    dy = y2 - y1

    if abs(dx) > abs(dy):  # –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ X
        return (x1 + (1 if dx > 0 else -1), y1)
    elif abs(dy) > abs(dx):  # –î–≤–∏–≥–∞–µ–º—Å—è –ø–æ Y
        return (x1, y1 + (1 if dy > 0 else -1))
    else:  # –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –ø–æ –æ–±–µ–∏–º –æ—Å—è–º, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if randint(0, 1) == 0:
            return (x1 + (1 if dx > 0 else -1), y1)
        else:
            return (x1, y1 + (1 if dy > 0 else -1))

def move_randomly(map_obj, position):
    """–°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–ª–∏ –Ω–µ—Ç"""
    neighbors = map_obj.get_neighbors(position)
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–∞–Ω—è—Ç
    random_neighbor = choice([pos for pos in neighbors if not map_obj.is_occupied(pos, (Herbivore, Predator, Grass, Tree, Rock))])
    return random_neighbor

